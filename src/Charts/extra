// const canvasRef = useRef();
//   const [land, setLand] = useState(null);
//   const [projection, setProjection] = useState(null);
//   const [startPoint, setStartPoint] = useState(null);
//   const sphere = ({type: "Sphere"});

//   useEffect(() => {
//     const fetchData = async () => {
//       try {
//         // Load land data asynchronously
//         const response = await fetch('/land-50m.json');
//         if (!response.ok) {
//           throw new Error('Failed to fetch data');
//         }
//         const world = await response.json();
//         const landData = await feature(world, world.objects.land);
//         setLand(landData);
//       } catch (error) {
//         console.error("Error fetching or parsing JSON:", error);
//         // Handle the error gracefully (e.g., show a message to the user)
//       }
//     };

//     fetchData();
//   }, []); // Empty dependency array ensures useEffect runs only once

//   useEffect(() => {
//     if (!land) return; // Wait for land data to be loaded

//     const canvas = canvasRef.current;
//     const context = canvas.getContext("2d");
//     const width = 960;
//     const height = 720;
//     const projection = geoOrthographic()
//       .scale(height / 2)
//       .translate([width / 2, height / 2 + 50])
//       .rotate([0, 0]) // Center the globe
//       .precision(0.1);
//       setProjection(() => projection);
//     const path = geoPath(projection, context);

//     const render = () => {
//       context.clearRect(0, 0, width, height);
//       context.beginPath(), path(sphere), context.fillStyle = "#fff", context.fill();
//       context.beginPath(), path(land), context.fillStyle = "#000", context.fill();
//       context.beginPath(), path(sphere), context.stroke();
//     };

//     const dragBehavior = drag()
//       .on("start", dragstarted)
//       .on("drag", dragged);

//     select(canvas)
//       .call(dragBehavior)
//       .call(() => render())
//       .node();
//   }, [land]);

  
//   function drag(projection) {
//     let v0, q0, r0, a0, l;
  
//     function pointer(event, that) {
//       const t = d3.pointers(event, that);
  
//       if (t.length !== l) {
//         l = t.length;
//         if (l > 1) a0 = Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0]);
//         dragstarted.apply(that, [event, that]);
//       }
  
//       // For multitouch, average positions and compute rotation.
//       if (l > 1) {
//         const x = d3.mean(t, p => p[0]);
//         const y = d3.mean(t, p => p[1]);
//         const a = Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0]);
//         return [x, y, a];
//       }
  
//       return t[0];
//     }
  
//     function dragstarted({x, y}) {
//       v0 = versor.cartesian(projection.invert([x, y]));
//       q0 = versor(r0 = projection.rotate());
//     }
  
//     function dragged(event) {
//       const v1 = versor.cartesian(projection.rotate(r0).invert([event.x, event.y]));
//       const delta = versor.delta(v0, v1);
//       let q1 = versor.multiply(q0, delta);
  
//       // For multitouch, compose with a rotation around the axis.
//       const p = pointer(event, this);
//       if (p[2]) {
//         const d = (p[2] - a0) / 2;
//         const s = -Math.sin(d);
//         const c = Math.sign(Math.cos(d));
//         q1 = versor.multiply([Math.sqrt(1 - s * s), 0, 0, c * s], q1);
//       }
  
//       projection.rotate(versor.rotation(q1));
  
//       // In vicinity of the antipode (unstable) of q0, restart.
//       if (delta[0] < 0.7) dragstarted.apply(this, [event, this]);
//     }
  
//     return d3.drag()
//         .on("start", dragstarted)
//         .on("drag", dragged);
//   }


//   // Define other necessary variables (sphere, land50, height)

//   return <canvas ref={canvasRef} width={960} height={1000} />;